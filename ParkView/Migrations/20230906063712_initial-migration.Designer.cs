// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkView.Models;

#nullable disable

namespace ParkView.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230906063712_initial-migration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParkView.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ParkView.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("HotelId");

                    b.HasIndex("LocationId");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            HotelId = 1,
                            Description = "A centrally located hotel, known for its lush green surroundings, spacious rooms, and premium dining.",
                            HotelName = "Radisson Blu Hotel",
                            LocationId = 1
                        },
                        new
                        {
                            HotelId = 2,
                            Description = "A business hotel, known for its comfortable rooms, wellness facilities, and dining options.",
                            HotelName = "The Westin Mindspace",
                            LocationId = 2
                        },
                        new
                        {
                            HotelId = 3,
                            Description = "A luxury beachfront retreat offering world-class spa services, gourmet dining, and panoramic ocean views.",
                            HotelName = "The Taj Gateway Hotel",
                            LocationId = 3
                        },
                        new
                        {
                            HotelId = 4,
                            Description = "Nestled in the heart of the forest, this cozy lodge is perfect for nature enthusiasts seeking tranquility and adventure.",
                            HotelName = "Whispering Pines Lodge",
                            LocationId = 4
                        },
                        new
                        {
                            HotelId = 5,
                            Description = "Chic and modern, these downtown suites provide a sophisticated stay for business travelers and city explorers.",
                            HotelName = "Urban Elegance Suites",
                            LocationId = 5
                        },
                        new
                        {
                            HotelId = 6,
                            Description = "Escape to the mountains and enjoy rustic charm, hiking trails, and stunning alpine vistas at this cozy retreat.",
                            HotelName = "Mountain Haven Retreat",
                            LocationId = 6
                        },
                        new
                        {
                            HotelId = 7,
                            Description = "A charming riverside inn with a peaceful ambiance, perfect for romantic getaways and nature lovers.",
                            HotelName = "Riverside Serenity Inn",
                            LocationId = 7
                        },
                        new
                        {
                            HotelId = 8,
                            Description = "Experience opulence and grandeur in this historic hotel, where luxury meets timeless elegance.",
                            HotelName = "The Royal Palace Hotel",
                            LocationId = 8
                        },
                        new
                        {
                            HotelId = 9,
                            Description = "A tropical paradise with private villas, water sports, and golden beaches - a dream vacation destination.",
                            HotelName = "Sunny Sands Resort & Villas",
                            LocationId = 9
                        },
                        new
                        {
                            HotelId = 10,
                            Description = "Located on the waterfront, these suites offer breathtaking harbor views, ideal for a coastal escape.",
                            HotelName = "Harbor View Suites",
                            LocationId = 8
                        },
                        new
                        {
                            HotelId = 11,
                            Description = "Immerse yourself in nature's beauty at this remote lodge with a spa, wildlife tours, and stargazing opportunities.",
                            HotelName = "Wilderness Lodge & Spa",
                            LocationId = 3
                        },
                        new
                        {
                            HotelId = 12,
                            Description = "A boutique hotel in the heart of the city, offering stylish rooms, fine dining, and easy access to cultural attractions.",
                            HotelName = "City Lights Boutique Hotel",
                            LocationId = 9
                        },
                        new
                        {
                            HotelId = 13,
                            Description = "Experience the tranquility of the countryside in this charming inn with rolling hills and farm-to-table cuisine.",
                            HotelName = "Countryside Charm Inn",
                            LocationId = 2
                        },
                        new
                        {
                            HotelId = 14,
                            Description = "A desert oasis with palm-lined pools, spa treatments, and desert adventures for a rejuvenating escape.",
                            HotelName = "Palm Oasis Resort",
                            LocationId = 3
                        },
                        new
                        {
                            HotelId = 15,
                            Description = "Step back in time in this meticulously restored mansion, offering a glimpse into the past with modern comforts.",
                            HotelName = "Historic Hideaway Mansion",
                            LocationId = 6
                        },
                        new
                        {
                            HotelId = 16,
                            Description = "Relax on white sandy beaches and enjoy water sports, beachfront dining, and breathtaking sunsets.",
                            HotelName = "Tropical Breeze Beachfront Resort",
                            LocationId = 7
                        },
                        new
                        {
                            HotelId = 17,
                            Description = "Nestled in the mountains, this lodge is a haven for skiers and hikers, with cozy fireside lounges and hot tubs.",
                            HotelName = "Alpine Retreat Lodge",
                            LocationId = 8
                        },
                        new
                        {
                            HotelId = 18,
                            Description = "Immerse yourself in the lush rainforest with guided hikes, canopy tours, and wildlife encounters.",
                            HotelName = "Rainforest Adventure Lodge",
                            LocationId = 5
                        });
                });

            modelBuilder.Entity("ParkView.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotelImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Address = "Kumara Krupa High Grounds ",
                            City = "Bangalore",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2016/12/The-LaLiT-New-Delhi.jpg",
                            LocationCode = "BLR"
                        },
                        new
                        {
                            LocationId = 2,
                            Address = "Post Office GUINDY INDUSTRIAL ESTATE",
                            City = "Chennai",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2016/12/The-LaLiT-Mumbai.jpg\r\n",
                            LocationCode = "CHN"
                        },
                        new
                        {
                            LocationId = 3,
                            Address = "Barakhamba Avenue, Connaught Place, New Delhi-110001",
                            City = "Delhi",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2016/12/The-LaLiT-Grand-Palace-Srinagar.jpg",
                            LocationCode = "DEL"
                        },
                        new
                        {
                            LocationId = 4,
                            Address = "Rajiv Gandhi IT Park, Chandigarh",
                            City = "Chandigarh",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2016/12/The-LaLiT-Golf-Spa-Resort-Goa.jpg",
                            LocationCode = "CHG"
                        },
                        new
                        {
                            LocationId = 5,
                            Address = "Mumbai Sahar Airport Road",
                            City = "Mumbai",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2017/02/Jaipur.jpg",
                            LocationCode = "MUM"
                        },
                        new
                        {
                            LocationId = 6,
                            Address = "Old Court House Street Dalhousie Square",
                            City = "Kolkata",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2017/02/Kolkata.jpg",
                            LocationCode = "KOL"
                        },
                        new
                        {
                            LocationId = 7,
                            Address = "Road No 10, Banjara Hills",
                            City = "Hyderabad",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2016/12/The-LaLiT-Temple-View-Khajuraho.jpg",
                            LocationCode = "HYD"
                        },
                        new
                        {
                            LocationId = 8,
                            Address = "Ground Floor Mariplex Mall, Kalyani Nagar",
                            City = "Pune",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2016/12/The-LaLiT-Ashok-Bangalore.jpg",
                            LocationCode = "PUN"
                        },
                        new
                        {
                            LocationId = 9,
                            Address = "Patia, Kiit Square",
                            City = "Bhubaneswar",
                            HotelImageUrl = "https://www.thelalit.com/wp-content/uploads/2016/12/The-LaLiT-Resort-Spa-Bekal.jpg",
                            LocationCode = "BBSR"
                        });
                });

            modelBuilder.Entity("ParkView.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"), 1L, 1);

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("PricePerNight")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoomsAvailable")
                        .HasColumnType("int");

                    b.HasKey("RoomId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            HotelId = 1,
                            PricePerNight = 28000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 2,
                            HotelId = 1,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 3,
                            HotelId = 1,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 4,
                            HotelId = 1,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 5,
                            HotelId = 2,
                            PricePerNight = 26000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 6,
                            HotelId = 2,
                            PricePerNight = 22000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 7,
                            HotelId = 2,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 4
                        },
                        new
                        {
                            RoomId = 8,
                            HotelId = 2,
                            PricePerNight = 9500,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 9,
                            HotelId = 3,
                            PricePerNight = 27000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 10,
                            HotelId = 3,
                            PricePerNight = 2200,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 11,
                            HotelId = 3,
                            PricePerNight = 15000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 12,
                            HotelId = 3,
                            PricePerNight = 8500,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 13,
                            HotelId = 4,
                            PricePerNight = 28000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 14,
                            HotelId = 4,
                            PricePerNight = 23000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 15,
                            HotelId = 4,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 16,
                            HotelId = 4,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 17,
                            HotelId = 5,
                            PricePerNight = 31000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 18,
                            HotelId = 5,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 19,
                            HotelId = 5,
                            PricePerNight = 15500,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 20,
                            HotelId = 5,
                            PricePerNight = 8800,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 21,
                            HotelId = 6,
                            PricePerNight = 29500,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 22,
                            HotelId = 6,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 23,
                            HotelId = 6,
                            PricePerNight = 16000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 24,
                            HotelId = 6,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 25,
                            HotelId = 7,
                            PricePerNight = 28000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 26,
                            HotelId = 7,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 27,
                            HotelId = 7,
                            PricePerNight = 15500,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 28,
                            HotelId = 7,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 29,
                            HotelId = 8,
                            PricePerNight = 28000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 30,
                            HotelId = 8,
                            PricePerNight = 21000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 31,
                            HotelId = 8,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 32,
                            HotelId = 8,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 33,
                            HotelId = 9,
                            PricePerNight = 27000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 34,
                            HotelId = 9,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 35,
                            HotelId = 9,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 36,
                            HotelId = 9,
                            PricePerNight = 8500,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 37,
                            HotelId = 10,
                            PricePerNight = 28000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 38,
                            HotelId = 10,
                            PricePerNight = 21000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 39,
                            HotelId = 10,
                            PricePerNight = 13000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 40,
                            HotelId = 10,
                            PricePerNight = 7500,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 41,
                            HotelId = 11,
                            PricePerNight = 29500,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 42,
                            HotelId = 11,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 43,
                            HotelId = 11,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 44,
                            HotelId = 11,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 45,
                            HotelId = 12,
                            PricePerNight = 27000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 46,
                            HotelId = 12,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 47,
                            HotelId = 12,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 48,
                            HotelId = 12,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 49,
                            HotelId = 13,
                            PricePerNight = 29000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 50,
                            HotelId = 13,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 51,
                            HotelId = 13,
                            PricePerNight = 13500,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 52,
                            HotelId = 13,
                            PricePerNight = 8000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 53,
                            HotelId = 14,
                            PricePerNight = 28000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 54,
                            HotelId = 14,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 55,
                            HotelId = 14,
                            PricePerNight = 14000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 56,
                            HotelId = 14,
                            PricePerNight = 9000,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 57,
                            HotelId = 15,
                            PricePerNight = 29000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 58,
                            HotelId = 15,
                            PricePerNight = 20000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 59,
                            HotelId = 15,
                            PricePerNight = 14500,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 60,
                            HotelId = 15,
                            PricePerNight = 8500,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 61,
                            HotelId = 16,
                            PricePerNight = 27000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 62,
                            HotelId = 16,
                            PricePerNight = 21000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 63,
                            HotelId = 16,
                            PricePerNight = 14500,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 64,
                            HotelId = 16,
                            PricePerNight = 9500,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 65,
                            HotelId = 17,
                            PricePerNight = 33000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 66,
                            HotelId = 17,
                            PricePerNight = 25000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 67,
                            HotelId = 17,
                            PricePerNight = 15000,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 68,
                            HotelId = 17,
                            PricePerNight = 8500,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        },
                        new
                        {
                            RoomId = 69,
                            HotelId = 18,
                            PricePerNight = 32000,
                            RoomTypeId = 1,
                            TotalRoomsAvailable = 2
                        },
                        new
                        {
                            RoomId = 70,
                            HotelId = 18,
                            PricePerNight = 22000,
                            RoomTypeId = 2,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 71,
                            HotelId = 18,
                            PricePerNight = 13500,
                            RoomTypeId = 3,
                            TotalRoomsAvailable = 3
                        },
                        new
                        {
                            RoomId = 72,
                            HotelId = 18,
                            PricePerNight = 8200,
                            RoomTypeId = 4,
                            TotalRoomsAvailable = 5
                        });
                });

            modelBuilder.Entity("ParkView.Models.RoomType", b =>
                {
                    b.Property<int>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            RoomTypeId = 1,
                            Description = "Experience unparalleled luxury in our Presidential Suite, where opulent comfort meets panoramic views and personalized service.",
                            TypeName = "Presidential Suite"
                        },
                        new
                        {
                            RoomTypeId = 2,
                            Description = "Discover refined comfort in our Executive Rooms, designed for business travelers and discerning guests seeking a touch of elegance.",
                            TypeName = "Executive"
                        },
                        new
                        {
                            RoomTypeId = 3,
                            Description = "Experience the pinnacle of comfort and elegance in our Super Deluxe Rooms, designed to cater to your every need.",
                            TypeName = "Super Deluxe"
                        },
                        new
                        {
                            RoomTypeId = 4,
                            Description = "Enjoy a comfortable and cozy stay in our Deluxe Rooms, offering modern amenities and a relaxing ambiance.",
                            TypeName = "Deluxe"
                        });
                });

            modelBuilder.Entity("ParkView.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkView.Models.Hotel", b =>
                {
                    b.HasOne("ParkView.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ParkView.Models.Room", b =>
                {
                    b.HasOne("ParkView.Models.Hotel", null)
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkView.Models.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("ParkView.Models.Hotel", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
